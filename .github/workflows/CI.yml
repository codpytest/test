name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-and-test-cpp-x86_64:
    runs-on: ${{ matrix.os }}
    env:
      CT2_VERBOSE: 1
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
        backend: [mkl, dnnl]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Intel oneAPI
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add *.PUB
          sudo sh -c 'echo "deb https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneAPI.list'
          sudo apt-get update
      - name: Store URL for downloading Intel oneAPI to environment variable
        if: startsWith(matrix.os, 'macos')
        run: |
          echo 'ONEAPI_INSTALLER_URL=https://registrationcenter-download.intel.com/akdlm/irc_nas/18865/m_BaseKit_p_2022.3.0.8743_offline.dmg' >> $GITHUB_ENV
      - name: Install Intel oneAPI
        if: startsWith(matrix.os, 'macos')
        run: |
          wget -q $ONEAPI_INSTALLER_URL
          hdiutil attach -noverify -noautofsck $(basename $ONEAPI_INSTALLER_URL)
      - name: Configure with MKL
        if: startsWith(matrix.os, 'ubuntu') && matrix.backend == 'mkl'
        run: |
          sudo apt-get install -y intel-oneapi-mkl-devel
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DBUILD_TESTS=ON .
      - name: Configure with DNNL
        if: startsWith(matrix.os, 'ubuntu') && matrix.backend == 'dnnl'
        env:
          DNNL_VERSION: 2022.2.1-16994
        run: |
          sudo apt-get install -y intel-oneapi-dnnl-devel=$DNNL_VERSION intel-oneapi-dnnl=$DNNL_VERSION
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DBUILD_TESTS=ON -DWITH_MKL=OFF -DOPENMP_RUNTIME=COMP -DWITH_DNNL=ON .
      - name: Configure with MKL
        if: startsWith(matrix.os, 'macos') && matrix.backend == 'mkl'
        run: |
          sudo /Volumes/$(basename $ONEAPI_INSTALLER_URL .dmg)/bootstrapper.app/Contents/MacOS/bootstrapper --silent --eula accept --components intel.oneapi.mac.mkl.devel
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DBUILD_TESTS=ON -DCMAKE_CXX_FLAGS="-Wno-unused-command-line-argument" .
      - name: Configure with DNNL
        if: startsWith(matrix.os, 'macos') && matrix.backend == 'dnnl'
        run: |
          sudo /Volumes/$(basename $ONEAPI_INSTALLER_URL .dmg)/bootstrapper.app/Contents/MacOS/bootstrapper --silent --eula accept --components intel.oneapi.mac.dnnl
          sudo install_name_tool -id @rpath/libdnnl.2.dylib /opt/intel/oneapi/dnnl/latest/cpu_iomp/lib/libdnnl.2.6.dylib
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DBUILD_TESTS=ON -DWITH_MKL=OFF -DWITH_DNNL=ON -DCMAKE_CXX_FLAGS="-Wno-unused-command-line-argument" .
      - name: Build
        run: |
          make install
      - name: Download test data
        working-directory: tests/data/models
        run: |
          wget https://opennmt-models.s3.amazonaws.com/pi_lm_step_5000.pt
          wget https://opennmt-models.s3.amazonaws.com/transliteration-aren-all.tar.gz
          tar xf transliteration-aren-all.tar.gz
      - name: Test
        run: |
          tests/ctranslate2_test tests/data
  build-and-test-cpp-aarch64:
    runs-on: ubuntu-20.04
    env:
      CT2_VERBOSE: 1
    strategy:
      matrix:
        backend: [openblas]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cross compiler and emulator
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-aarch64-linux-gnu gfortran-aarch64-linux-gnu qemu-user-static
      - name: Build with OpenBLAS and Ruy
        if: matrix.backend == 'openblas'
        run: |
          wget https://github.com/xianyi/OpenBLAS/archive/v0.3.13.tar.gz
          tar xzvf v0.3.13.tar.gz
          cd OpenBLAS-0.3.13
          make TARGET=ARMV8 CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran HOSTCC=gcc NO_LAPACK=1 -j $(nproc)
          sudo make PREFIX=/usr/aarch64-linux-gnu install
          cd ..
          cmake \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
            -DOPENMP_RUNTIME=COMP \
            -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DWITH_MKL=OFF \
            -DWITH_OPENBLAS=ON \
            -DWITH_RUY=ON \
            -DBUILD_TESTS=ON \
            .
          make -j $(nproc) install
      - name: Download test data
        run: |
          wget https://opennmt-models.s3.amazonaws.com/transliteration-aren-all.tar.gz
          tar xf transliteration-aren-all.tar.gz -C tests/data/models/
      - name: Test
        run: |
          tests/ctranslate2_test tests/data
        env:
          QEMU_LD_PREFIX: /usr/aarch64-linux-gnu